#!/usr/bin/python

# See file COPYING distributed with dpf for copyright and license.

import wsgiref.simple_server

import sys
import os
import argparse
import ConfigParser
import importlib
import wsgiref.simple_server
import dpf.process

description = """Start a process server."""

progname = os.path.basename(sys.argv[0])

parser = argparse.ArgumentParser(description=description,
                                 formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--config', '-c', 
                    help='the config file')
parser.add_argument('--handler', '-H',
                    action='append',
                    dest='handlers',
                    help='a data handler (may be specified more than once)')
parser.add_argument('--cache', '-C', 
                    help='cache directory')
parser.add_argument('--port', '-p', 
                    default=8081, 
                    type=int, 
                    help='server port')
parser.add_argument('-1', 
                    default=True,
                    action='store_false', 
                    dest='serve_forever', 
                    help='serve one request, then exit')

args = parser.parse_args()

if not args.config and not args.cache:
    parser.print_usage(sys.stderr)
    fmt = '%s: error: --config or --cache required\n'
    sys.stderr.write(fmt % progname)
    sys.exit(2)

handler_info = {}

if args.config:
    config = ConfigParser.ConfigParser({'arguments': None})
    config.read(args.config)
    cache = config.get('global', 'cache')
    for section in config.sections():
        if not section.startswith('handler '):
            continue
        location = config.get(section, 'location')
        class_path = config.get(section, 'class')
        arguments = config.get(section, 'arguments')
        if not arguments:
            arguments = []
        else:
            arguments = [ arg.strip() for arg in arguments.split(',') ]
        handler_info[location] = (class_path, arguments)

if args.cache:
    cache = args.cache

if args.handlers:
    for handler in args.handlers:
        (location, class_path) = handler.split('=')
        arguments = []
        handler_info[location] = (class_path, arguments)

print 'cache: %s' % cache

if not handler_info:
    print 'WARNING: no handlers'
else:
    for location in sorted(handler_info):
        (class_path, arguments) = handler_info[location]
        if not arguments:
            print '    %s: %s' % (location, class_path)
        else:
            print '    %s: %s%s' % (location, class_path, str(arguments))

handlers = {}

for (location, (class_path, arguments)) in handler_info.iteritems():
    (module_path, class_name) = class_path.rsplit('.', 1)
    module = importlib.import_module(module_path)
    handler_class = getattr(module, class_name)
    handlers[location] = handler_class(*arguments)

app = dpf.process.Application(cache, handlers)

httpd = wsgiref.simple_server.make_server('localhost', args.port, app)
print 'ready to serve on %d' % args.port

try:
    if args.serve_forever:
        httpd.serve_forever()
    httpd.handle_request()
except KeyboardInterrupt:
    print 'caught ctl-c'

sys.exit(0)

# eof
